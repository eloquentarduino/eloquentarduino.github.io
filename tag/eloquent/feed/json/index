{
    "version": "https://jsonfeed.org/version/1",
    "user_comment": "This feed allows you to read the posts from this site in any feed reader that supports the JSON Feed format. To add this feed to your reader, copy the following URL -- https://eloquentarduino.github.io/tag/eloquent/feed/json/ -- and add it your reader.",
    "home_page_url": "https://eloquentarduino.github.io/tag/eloquent/",
    "feed_url": "https://eloquentarduino.github.io/tag/eloquent/feed/json/",
    "title": "Eloquent Arduino Blog",
    "description": "Machine learning on Arduino, programming &amp; electronics",
    "items": [
        {
            "id": "https://eloquentarduino.github.io/2019/12/arduino-bounded-waiting/",
            "url": "https://eloquentarduino.github.io/2019/12/arduino-bounded-waiting/",
            "title": "Eloquent bounded waiting: the await construct",
            "content_html": "<p>Sometimes you may need to wait for a certain condition to become true, but you don't want to wait forever: it may be awaiting for Serial, for the Wifi to connect to a network, or the response from a SoftwareSerial peripheral. The <code>await</code> construct lets you put an upper bound to the time you're willing to wait.</p>\n<p><span id=\"more-211\"></span></p>\n<p>Most often, you see example code of this kind:</p>\n<pre><code class=\"language-cpp\">Serial.print(&quot;Attempting to connect to WiFi&quot;);\n\nwhile (WiFi.status() != WL_CONNECTED) {\n    Serial.print(&quot;.&quot;);\n    delay(500);\n}</code></pre>\n<p>If the connection doesn't succeed (maybe the AP is out of range or is down), you're stuck in an endless wait. A proper way for handling such situations is with a timeout that gets you out of the loop with an error status so you can handle the failure.<br />\n<code>await</code> is exactly this: a construct to await for a condition to become true until a timeout expires, returning true or false as a response.</p>\n<h3>Definition</h3>\n<pre><code class=\"language-cpp\">#define await(condition, timeout) await_with_interval(condition, timeout, 10)\n#define await_with_interval(condition, timeout, interval) \\\n  ([]() { \\\n    uint32_t start = millis(); \\\n    while (millis() - start &lt;= timeout) { \\\n      if (condition) return true; \\\n      delay(interval); \\\n    } \\\n  return false; })()</code></pre>\n<h3>How to use</h3>\n<p><code>await</code> needs at least two arguments:</p>\n<ol>\n<li>the condition to await for</li>\n<li>the timeout, in milliseconds</li>\n</ol>\n<pre><code>// these are for greater code readability\r\n#define Millis \r\n#define Second  *1000\r\n#define Seconds *1000\r\n</code></pre>\n<pre><code class=\"language-cpp\">bool wifiConnected = await(WiFi.status() == WL_CONNECTED, 10 Seconds)</code></pre>\n<p>The code above will wait 10 seconds for the wifi to connect: on failure, <code>wifiConnected</code> will be false and you can gently fail. </p>\n<p>You can use it for any kind of check, like waiting for <code>Serial</code>.</p>\n<pre><code class=\"language-cpp\">bool serialReady = await(Serial, 5 Seconds)\nbool serialHasCharacters = await(Serial.available(), 5 Seconds)</code></pre>\n<p>The default interval between checks is 10 milliseconds: if you need a custom delay interval you can use the more verbose <code>await_with_interval</code>:</p>\n<pre><code class=\"language-cpp\">// await WiFi for 10 seconds, check if connected every 500 millis\nbool wifiConnected = await_with_interval(WiFi.status() == WL_CONNECTED, 10 Seconds, 500 Millis)</code></pre>\n<h3>How it works</h3>\n<p>The <code>await</code> macro creates an <a href=\"http://www.cplusplus.com/articles/2LywvCM9/\">inline function</a> that loops until the timeout expires. At every loop it checks if the condition is true: if that's the case, it returns true. The inline function construct is needed to get a return value, so you can assign it to a variable or embed directly inside an <code>if</code> test. The following code sample gives you an idea of what's happening.</p>\n<pre><code class=\"language-cpp\">bool wifiConnected = await(WiFi.status() == WL_CONNECTED, 10 Seconds)\n\n// conceptually translates to\n\nbool inline_function() {\n    uint32_t start = millis();\n\n    while (millis() - start &lt;= 10000) {\n      if (WiFi.status() == WL_CONNECTED)\n        return true;\n\n      delay(10);\n    }\n\n   return false;\n}\n\nbool wifiConnected = inline_function();</code></pre>\n<p>L'articolo <a rel=\"nofollow\" href=\"https://eloquentarduino.github.io/2019/12/arduino-bounded-waiting/\">Eloquent bounded waiting: the await construct</a> proviene da <a rel=\"nofollow\" href=\"http://eloquentarduino.github.io/\">Eloquent Arduino Blog</a>.</p>\n",
            "content_text": "Sometimes you may need to wait for a certain condition to become true, but you don't want to wait forever: it may be awaiting for Serial, for the Wifi to connect to a network, or the response from a SoftwareSerial peripheral. The await construct lets you put an upper bound to the time you're willing to wait.\n\nMost often, you see example code of this kind:\nSerial.print(&quot;Attempting to connect to WiFi&quot;);\n\nwhile (WiFi.status() != WL_CONNECTED) {\n    Serial.print(&quot;.&quot;);\n    delay(500);\n}\nIf the connection doesn't succeed (maybe the AP is out of range or is down), you're stuck in an endless wait. A proper way for handling such situations is with a timeout that gets you out of the loop with an error status so you can handle the failure.\nawait is exactly this: a construct to await for a condition to become true until a timeout expires, returning true or false as a response.\nDefinition\n#define await(condition, timeout) await_with_interval(condition, timeout, 10)\n#define await_with_interval(condition, timeout, interval) \\\n  ([]() { \\\n    uint32_t start = millis(); \\\n    while (millis() - start &lt;= timeout) { \\\n      if (condition) return true; \\\n      delay(interval); \\\n    } \\\n  return false; })()\nHow to use\nawait needs at least two arguments:\n\nthe condition to await for\nthe timeout, in milliseconds\n\n// these are for greater code readability\r\n#define Millis \r\n#define Second  *1000\r\n#define Seconds *1000\r\n\nbool wifiConnected = await(WiFi.status() == WL_CONNECTED, 10 Seconds)\nThe code above will wait 10 seconds for the wifi to connect: on failure, wifiConnected will be false and you can gently fail. \nYou can use it for any kind of check, like waiting for Serial.\nbool serialReady = await(Serial, 5 Seconds)\nbool serialHasCharacters = await(Serial.available(), 5 Seconds)\nThe default interval between checks is 10 milliseconds: if you need a custom delay interval you can use the more verbose await_with_interval:\n// await WiFi for 10 seconds, check if connected every 500 millis\nbool wifiConnected = await_with_interval(WiFi.status() == WL_CONNECTED, 10 Seconds, 500 Millis)\nHow it works\nThe await macro creates an inline function that loops until the timeout expires. At every loop it checks if the condition is true: if that's the case, it returns true. The inline function construct is needed to get a return value, so you can assign it to a variable or embed directly inside an if test. The following code sample gives you an idea of what's happening.\nbool wifiConnected = await(WiFi.status() == WL_CONNECTED, 10 Seconds)\n\n// conceptually translates to\n\nbool inline_function() {\n    uint32_t start = millis();\n\n    while (millis() - start &lt;= 10000) {\n      if (WiFi.status() == WL_CONNECTED)\n        return true;\n\n      delay(10);\n    }\n\n   return false;\n}\n\nbool wifiConnected = inline_function();\nL'articolo Eloquent bounded waiting: the await construct proviene da Eloquent Arduino Blog.",
            "date_published": "2019-12-05T19:50:59+01:00",
            "date_modified": "2019-12-16T23:03:25+01:00",
            "author": {
                "name": "simone",
                "url": "https://eloquentarduino.github.io/author/simone/",
                "avatar": "http://1.gravatar.com/avatar/d670eb91ca3b1135f213ffad83cb8de4?s=512&d=mm&r=g"
            },
            "tags": [
                "eloquent",
                "Eloquent library"
            ]
        },
        {
            "id": "https://eloquentarduino.github.io/2019/12/non-blocking-arduino-code/",
            "url": "https://eloquentarduino.github.io/2019/12/non-blocking-arduino-code/",
            "title": "Eloquent non-blocking code: the Every construct",
            "content_html": "<p>The <code>every</code> construct lets you run a piace of code at regular intervals in a fluent way. If you don't need to start, stop, pause your timer, this construct is a valid alternative to more complex timer libraries already available: it only takes a time interval as argument and will execute the code block periodically.</p>\n<p><span id=\"more-209\"></span></p>\n<h3>Definition</h3>\n<pre><code class=\"language-cpp\">#define every(interval) \\\n    static uint32_t __every__##interval = millis(); \\\n    if (millis() - __every__##interval &gt;= interval &amp;&amp; (__every__##interval = millis()))</code></pre>\n<h3>How to use</h3>\n<pre><code>// these are for greater code readability\r\n#define Millis \r\n#define Second  *1000\r\n#define Seconds *1000\r\n</code></pre>\n<pre><code class=\"language-cpp\">int interval = 1 Second;\n\nvoid setup() {\n    Serial.begin(115200);\n}\n\nvoid loop() {\n    every(1000 Millis) {\n        Serial.println(&quot;This line is printed every 1 second&quot;);\n    }\n\n    every(2000 Millis) {\n        Serial.println(&quot;This line is printed every 2 seconds&quot;);\n    }\n\n    every(interval) {\n        interval += 1 Second;\n        Serial.print(&quot;You can have variable intervals too! &quot;);\n        Serial.print(&quot;This line will be printed again in &quot;);\n        Serial.print(interval / 1000);\n        Serial.println(&quot; seconds&quot;);\n    }\n}</code></pre>\n<h3>Caveats</h3>\n<p><code>every</code> is just a macro definition and is not a proper timer, so it has some limitations:</p>\n<ol>\n<li>you can't stop, pause or resume it: once set, it will run forever</li>\n<li>its argument must be the suffix of a valid identifier</li>\n<li>you can't use several <code>every</code> with the exact same argument: you have to put all the code that needs to happen at the same interval in the same block</li>\n</ol>\n<h4>Caveat #2</h4>\n<p>The macro works by generating a variable named like <code>__every__##argument</code></p>\n<pre><code class=\"language-cpp\">every(1) ==&gt; uint32_t __every__1;\nevery(2) ==&gt; uint32_t __every__2;\nevery(a_given_interval) ==&gt; uint32_t __every__a_given_interval;\nevery(an invalid interval) ==&gt; uint32_t __every__an invalid interval; // Syntax error\nevery(1 Second) ==&gt; uint32_t __every__1 *1000; // Syntax error</code></pre>\n<p>So every integer literal and any variable are all valid arguments. Any expression is forbidden.</p>\n<h4>Caveat #3</h4>\n<p>If you use two <code>every</code> with the exact same argument, two variables with the exact same name will be created and it will rise a compile-time error.</p>\n<p>If you can live with this limitations, <code>every</code> only needs the space of an <code>uint32_t</code> to work.</p>\n<p>L'articolo <a rel=\"nofollow\" href=\"https://eloquentarduino.github.io/2019/12/non-blocking-arduino-code/\">Eloquent non-blocking code: the Every construct</a> proviene da <a rel=\"nofollow\" href=\"http://eloquentarduino.github.io/\">Eloquent Arduino Blog</a>.</p>\n",
            "content_text": "The every construct lets you run a piace of code at regular intervals in a fluent way. If you don't need to start, stop, pause your timer, this construct is a valid alternative to more complex timer libraries already available: it only takes a time interval as argument and will execute the code block periodically.\n\nDefinition\n#define every(interval) \\\n    static uint32_t __every__##interval = millis(); \\\n    if (millis() - __every__##interval &gt;= interval &amp;&amp; (__every__##interval = millis()))\nHow to use\n// these are for greater code readability\r\n#define Millis \r\n#define Second  *1000\r\n#define Seconds *1000\r\n\nint interval = 1 Second;\n\nvoid setup() {\n    Serial.begin(115200);\n}\n\nvoid loop() {\n    every(1000 Millis) {\n        Serial.println(&quot;This line is printed every 1 second&quot;);\n    }\n\n    every(2000 Millis) {\n        Serial.println(&quot;This line is printed every 2 seconds&quot;);\n    }\n\n    every(interval) {\n        interval += 1 Second;\n        Serial.print(&quot;You can have variable intervals too! &quot;);\n        Serial.print(&quot;This line will be printed again in &quot;);\n        Serial.print(interval / 1000);\n        Serial.println(&quot; seconds&quot;);\n    }\n}\nCaveats\nevery is just a macro definition and is not a proper timer, so it has some limitations:\n\nyou can't stop, pause or resume it: once set, it will run forever\nits argument must be the suffix of a valid identifier\nyou can't use several every with the exact same argument: you have to put all the code that needs to happen at the same interval in the same block\n\nCaveat #2\nThe macro works by generating a variable named like __every__##argument\nevery(1) ==&gt; uint32_t __every__1;\nevery(2) ==&gt; uint32_t __every__2;\nevery(a_given_interval) ==&gt; uint32_t __every__a_given_interval;\nevery(an invalid interval) ==&gt; uint32_t __every__an invalid interval; // Syntax error\nevery(1 Second) ==&gt; uint32_t __every__1 *1000; // Syntax error\nSo every integer literal and any variable are all valid arguments. Any expression is forbidden.\nCaveat #3\nIf you use two every with the exact same argument, two variables with the exact same name will be created and it will rise a compile-time error.\nIf you can live with this limitations, every only needs the space of an uint32_t to work.\nL'articolo Eloquent non-blocking code: the Every construct proviene da Eloquent Arduino Blog.",
            "date_published": "2019-12-05T19:42:45+01:00",
            "date_modified": "2019-12-16T22:59:36+01:00",
            "author": {
                "name": "simone",
                "url": "https://eloquentarduino.github.io/author/simone/",
                "avatar": "http://1.gravatar.com/avatar/d670eb91ca3b1135f213ffad83cb8de4?s=512&d=mm&r=g"
            },
            "tags": [
                "eloquent",
                "Eloquent library"
            ]
        },
        {
            "id": "https://eloquentarduino.github.io/2019/11/how-to-write-clean-arduino-code/",
            "url": "https://eloquentarduino.github.io/2019/11/how-to-write-clean-arduino-code/",
            "title": "How to write clean Arduino code: introducing the Eloquent library",
            "content_html": "<p>Eloquent Arduino is an attempt to bring sanity and clarity in Arduino projects.\u00a0The purpose of this library is to create a wide range of constructs to clearly translate your ideas into meaningful code: <strong>stop writing spaghetti code</strong>  only you can undestand, please! I'll show you how.</p>\n<p><span id=\"more-164\"></span></p>\n<p><img src=\"https://eloquentarduino.github.io/wp-content/uploads/2019/11/CleanCode.jpg\" alt=\"from https://www.wlion.com/blog/5-reasons-you-should-be-writing-clean-code/\" /></p>\n<h2>The problem</h2>\n<p>Arduino sells itself as a platform well suited for beginners, and it is for sure; lots of non-tech people are able to bring their ideas to life thanks to this awesome platform.<br />\nNevertheless, I often stumble upon bits of code over the internet that make me question about the quality of the projects people are producing. </p>\n<p>Even the Arduino official website is misleading in this sense, in my opinion, since it promotes a code style really straighforward, but suited for toy projects, with little logics and low complexity level.</p>\n<p>Here's an example of what I'm talking about, copy-pasted from the <a href=\"https://www.arduino.cc/en/tutorial/BlinkWithoutDelay\">Arduino official site</a> (with comments removed):</p>\n<pre><code class=\"language-cpp\">const int ledPin =  LED_BUILTIN;\nint ledState = LOW;\nunsigned long previousMillis = 0; \nconst long interval = 1000; \n\nvoid setup() {\n  pinMode(ledPin, OUTPUT);\n}\n\nvoid loop() {\n  unsigned long currentMillis = millis();\n\n  if (currentMillis - previousMillis &gt;= interval) {\n    previousMillis = currentMillis;\n\n    if (ledState == LOW) {\n      ledState = HIGH;\n    } else {\n      ledState = LOW;\n    }\n\n    digitalWrite(ledPin, ledState);\n  }\n}</code></pre>\n<p>Can you tell what this code does <strong>with a minimum mental effort</strong>?<br />\nI don't think so (you may have recognized the <em>async pattern</em> and it actually blinks a LED in a non-blocking fashion).</p>\n<p><strong>THIS</strong> is the problem: most Arduino code is not clear at first glance, is not <strong>eloquent</strong>. By eloquent I mean code that speaks by itself, without the need for comments.</p>\n<hr /><p><em>most Arduino code is not clear at first glance, is not eloquent</em><br /><a href='https://twitter.com/intent/tweet?url=http%3A%2F%2Feloquent.blog%2F2019%2F11%2Fhow-to-write-clean-arduino-code%2F&#038;text=most%20Arduino%20code%20is%20not%20clear%20at%20first%20glance%2C%20is%20not%20eloquent&#038;via=EloquentArduino&#038;related=EloquentArduino' target='_blank' rel=\"noopener noreferrer\" >Click To Tweet</a><br /><hr />\n<h2>The solution</h2>\n<p>What about the following?</p>\n<pre><code class=\"language-cpp\">DigitalOut led(LED_BUILTIN);\n\nvoid setup() {\n    led.begin();\n}\n\nvoid loop() {\n    every(1 Second) {\n        led.toggle();\n    }\n}</code></pre>\n<p>I swear this is valid code that compiles just fine. Hopefully, it does the exact same thing as above, yet it is far more readable and understandable. </p>\n<p>Can you see my point now? Wouldn't it be much easier and reliable to code with the help of a set of such eloquent constructs / interfaces? I strongly believe it is, and this is why I'm writing this library.<br />\nAsynchronous programming, pin state managements, animations are bits of code that pop up over and over again in most of the projects, yet every time we start from zero and write the same boilerplate code over and over again.</p>\n<hr /><p><em>Boilerplate code is not only tedious, but error-prone. And lengthy. Start writing eloquent code now!</em><br /><a href='https://twitter.com/intent/tweet?url=http%3A%2F%2Feloquent.blog%2F2019%2F11%2Fhow-to-write-clean-arduino-code%2F&#038;text=Boilerplate%20code%20is%20not%20only%20tedious%2C%20but%20error-prone.%20And%20lengthy.%20Start%20writing%20eloquent%20code%20now%21&#038;via=EloquentArduino&#038;related=EloquentArduino' target='_blank' rel=\"noopener noreferrer\" >Click To Tweet</a><br /><hr />\n<p>Boilerplate code heavily relies on a fixed structure that could be hard to adapt to your specific case. Longer code means more chances to break something and more code to debug, which can waste lots of your valuable time.</p>\n<hr />\n<p>I'm starting a series of posts where I'll document some of the classes and constructs the library provides to you. You can find the code on the <a href=\"https://github.com/eloquentarduino/EloquentArduino\">Github repo</a>.</p>\n<p>L'articolo <a rel=\"nofollow\" href=\"https://eloquentarduino.github.io/2019/11/how-to-write-clean-arduino-code/\">How to write clean Arduino code: introducing the Eloquent library</a> proviene da <a rel=\"nofollow\" href=\"http://eloquentarduino.github.io/\">Eloquent Arduino Blog</a>.</p>\n",
            "content_text": "Eloquent Arduino is an attempt to bring sanity and clarity in Arduino projects.\u00a0The purpose of this library is to create a wide range of constructs to clearly translate your ideas into meaningful code: stop writing spaghetti code  only you can undestand, please! I'll show you how.\n\n\nThe problem\nArduino sells itself as a platform well suited for beginners, and it is for sure; lots of non-tech people are able to bring their ideas to life thanks to this awesome platform.\nNevertheless, I often stumble upon bits of code over the internet that make me question about the quality of the projects people are producing. \nEven the Arduino official website is misleading in this sense, in my opinion, since it promotes a code style really straighforward, but suited for toy projects, with little logics and low complexity level.\nHere's an example of what I'm talking about, copy-pasted from the Arduino official site (with comments removed):\nconst int ledPin =  LED_BUILTIN;\nint ledState = LOW;\nunsigned long previousMillis = 0; \nconst long interval = 1000; \n\nvoid setup() {\n  pinMode(ledPin, OUTPUT);\n}\n\nvoid loop() {\n  unsigned long currentMillis = millis();\n\n  if (currentMillis - previousMillis &gt;= interval) {\n    previousMillis = currentMillis;\n\n    if (ledState == LOW) {\n      ledState = HIGH;\n    } else {\n      ledState = LOW;\n    }\n\n    digitalWrite(ledPin, ledState);\n  }\n}\nCan you tell what this code does with a minimum mental effort?\nI don't think so (you may have recognized the async pattern and it actually blinks a LED in a non-blocking fashion).\nTHIS is the problem: most Arduino code is not clear at first glance, is not eloquent. By eloquent I mean code that speaks by itself, without the need for comments.\nmost Arduino code is not clear at first glance, is not eloquentClick To Tweet\nThe solution\nWhat about the following?\nDigitalOut led(LED_BUILTIN);\n\nvoid setup() {\n    led.begin();\n}\n\nvoid loop() {\n    every(1 Second) {\n        led.toggle();\n    }\n}\nI swear this is valid code that compiles just fine. Hopefully, it does the exact same thing as above, yet it is far more readable and understandable. \nCan you see my point now? Wouldn't it be much easier and reliable to code with the help of a set of such eloquent constructs / interfaces? I strongly believe it is, and this is why I'm writing this library.\nAsynchronous programming, pin state managements, animations are bits of code that pop up over and over again in most of the projects, yet every time we start from zero and write the same boilerplate code over and over again.\nBoilerplate code is not only tedious, but error-prone. And lengthy. Start writing eloquent code now!Click To Tweet\nBoilerplate code heavily relies on a fixed structure that could be hard to adapt to your specific case. Longer code means more chances to break something and more code to debug, which can waste lots of your valuable time.\n\nI'm starting a series of posts where I'll document some of the classes and constructs the library provides to you. You can find the code on the Github repo.\nL'articolo How to write clean Arduino code: introducing the Eloquent library proviene da Eloquent Arduino Blog.",
            "date_published": "2019-11-03T17:05:46+01:00",
            "date_modified": "2019-12-22T14:40:10+01:00",
            "author": {
                "name": "simone",
                "url": "https://eloquentarduino.github.io/author/simone/",
                "avatar": "http://1.gravatar.com/avatar/d670eb91ca3b1135f213ffad83cb8de4?s=512&d=mm&r=g"
            },
            "tags": [
                "eloquent",
                "Eloquent library"
            ]
        }
    ]
}